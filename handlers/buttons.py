from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.storage import get_user, save_data

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = str(query.message.chat.id)
    user = get_user(chat_id)
    data = query.data

    if data.startswith("res_"):
        index = int(data.split("_")[1])
        context.user_data["selected"] = index
        bet = user["bets"][index]
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–±–µ–¥–∞", callback_data="win"),
                InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", callback_data="lose")
            ]
        ]
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: {bet['match']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("del_"):
        index = int(data.split("_")[1])
        bet = user["bets"][index]
        if bet["status"] != "pending":
            await query.edit_message_text("‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
            return

        platform = bet.get("source", "optibet")
        user["banks"][platform] += bet["amount"]
        bet["status"] = "deleted"
        save_data()

        await query.edit_message_text(
            f"‚ùå –°—Ç–∞–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {bet['match']}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã: {bet['amount']}‚Ç¨\n"
            f"–ë–∞–Ω–∫ {platform}: {user['banks'][platform]:.2f}‚Ç¨"
        )

    elif data.startswith("undel_"):
        index = int(data.split("_")[1])
        bet = user["bets"][index]
        platform = bet.get("source", "optibet")
        if bet["status"] != "deleted":
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É.")
            return
        if user["banks"][platform] < bet["amount"]:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        user["banks"][platform] -= bet["amount"]
        bet["status"] = "pending"
        save_data()

        await query.edit_message_text(
            f"‚úÖ –°—Ç–∞–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {bet['match']}\n"
            f"üí∏ {bet['amount']}‚Ç¨ —Å–Ω—è—Ç–æ\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫ {platform}: {user['banks'][platform]:.2f}‚Ç¨"
        )

    elif data in ["win", "lose"]:
        index = context.user_data.get("selected")
        if index is None:
            return

        bet = user["bets"][index]
        if bet["status"] != "pending":
            await query.edit_message_text("–°—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        source = bet.get("source", "optibet")
        if data == "win":
            profit = bet["amount"] * bet["coeff"]
            user["banks"][source] += profit
            bet["status"] = "win"
            msg = f"‚úÖ –ü–æ–±–µ–¥–∞: {bet['match']} ({source})\n+{profit:.2f}‚Ç¨"
        else:
            bet["status"] = "lose"
            msg = f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ: {bet['match']} ({source})\n-{bet['amount']:.2f}‚Ç¨"

        save_data()
        await query.edit_message_text(msg + f"\nüí∞ –ù–æ–≤—ã–π –±–∞–Ω–∫ {source}: {user['banks'][source]:.2f}‚Ç¨")