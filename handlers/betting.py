from telegram import Update
from telegram.ext import ContextTypes
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import datetime
from utils.storage import get_user, save_data, LATVIA_TZ
from utils.auth import require_auth

# /bet (–Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞)
@require_auth
async def bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["bet_step"] = "sport"
    keyboard = [
        [InlineKeyboardButton("CS2", callback_data="sport_CS2")],
        [InlineKeyboardButton("–§—É—Ç–±–æ–ª", callback_data="sport_–§—É—Ç–±–æ–ª")],
        [InlineKeyboardButton("–•–æ–∫–∫–µ–π", callback_data="sport_–•–æ–∫–∫–µ–π")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="sport_other")]
    ]

    await update.message.reply_text(
        "‚öΩ –í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    context.user_data["bet_step"] = "match"
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ (–ø—Ä–∏–º–µ—Ä: NaVi vs G2)")

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "bet_step" in context.user_data:
        context.user_data.clear()
        await update.message.reply_text("‚ùå –í–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–µ–π—á–∞—Å —Ç—ã –Ω–µ –≤–≤–æ–¥–∏—à—å —Å—Ç–∞–≤–∫—É.")

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
async def pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    pending_bets = [b for b in user["bets"] if b["status"] == "pending"]
    if not pending_bets:
        await update.message.reply_text("‚úÖ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return

    msg = "üìã <b>–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:</b>\n\n"
    for i, b in enumerate(pending_bets, 1):
        dt = datetime.datetime.fromisoformat(b["time"]) if isinstance(b["time"], str) else b["time"]
        msg += f"{i}. {b['match']} ‚Äî {b['amount']}‚Ç¨ @ {b['coeff']} ({dt.strftime('%d.%m %H:%M')})\n"

    await update.message.reply_text(msg, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤ –ø—Ä–∏ /bet
async def bet_step_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from handlers.today import process_today_lines

    if context.user_data.get("bet_step") == "sport_manual":
        sport = update.message.text.strip()
        context.user_data["sport"] = sport
        context.user_data["bet_step"] = "type"
        await update.message.reply_text(f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}")
        # —Å—é–¥–∞ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        return


    if context.user_data.get("awaiting_today_input"):
        context.user_data.pop("awaiting_today_input")
        lines = update.message.text.splitlines()
        if len(lines) < 2:
            await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏: —Å—Ç–∞–≤–∫–∞ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ.")
            return
        await process_today_lines(update, context, lines)
        return

    step = context.user_data.get("bet_step")
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    if step == "match":
        match = update.message.text.strip()
        words = match.split()
        if len(words) == 2 and "vs" not in match.lower():
            match = f"{words[0]} vs {words[1]}"
        context.user_data["match"] = match
        context.user_data["bet_step"] = "platform"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (optibet / olybet / bonus):")

    elif step == "platform":
        platform = update.message.text.lower().strip()
        if platform not in ["optibet", "olybet", "bonus"]:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏: optibet, olybet –∏–ª–∏ bonus.")
            return
        context.user_data["platform"] = platform
        context.user_data["bet_step"] = "amount"
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ ‚Ç¨ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)")

    elif step == "amount":
        try:
            amount = float(update.message.text.strip())
            if amount <= 0:
                await update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return

            platform = context.user_data["platform"]
            if amount > user["banks"][platform]:
                await update.message.reply_text(f"‚ö†Ô∏è –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {user['banks'][platform]:.2f}‚Ç¨ –Ω–∞ {platform}.")
                return

            context.user_data["amount"] = amount
            context.user_data["bet_step"] = "coeff"

            percentage = (amount / user["banks"][platform]) * 100
            warning = f"\n‚ö†Ô∏è –≠—Ç–æ {percentage:.1f}% –æ—Ç –±–∞–Ω–∫–∞ {platform}. –£–≤–µ—Ä–µ–Ω?" if percentage >= 20 else ""
            await update.message.reply_text(f"–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.85){warning}")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    elif step == "coeff":
        try:
            coeff = float(update.message.text.strip())
            if coeff < 1:
                await update.message.reply_text("‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1.00")
                return

            context.user_data["coeff"] = coeff
            context.user_data["bet_step"] = "reminder"
            await update.message.reply_text(
                "üîî –•–æ—á–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏?\n"
                "–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–î–î.–ú–ú –ß–ß:–ú–ú</b>\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–Ω–µ—Ç</b>, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ.", parse_mode="HTML"
            )
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.")

    elif step == "reminder":
        answer = update.message.text.strip().lower()
        match = context.user_data["match"]
        now = datetime.datetime.now(LATVIA_TZ)

        if answer in ["–Ω–µ—Ç", "no"]:
            reminder_time = None
        else:
            try:
                naive_dt = datetime.datetime.strptime(answer, "%d.%m %H:%M")
                dt = naive_dt.replace(tzinfo=LATVIA_TZ)

                if dt.astimezone(datetime.timezone.utc) <= now.astimezone(datetime.timezone.utc):
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                        f"–°–µ–π—á–∞—Å: <b>{now.strftime('%d.%m %H:%M')}</b>\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–Ω–µ—Ç</b>.",
                        parse_mode="HTML"
                    )
                    return
                reminder_time = dt.isoformat()
            except:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú –ß–ß:–ú–ú")
                return

        bet = {
            "match": context.user_data["match"],
            "amount": context.user_data["amount"],
            "coeff": context.user_data["coeff"],
            "status": "pending",
            "time": now,
            "type": (
                "safe" if context.user_data["coeff"] <= 1.20 else
                "value" if 1.60 <= context.user_data["coeff"] <= 2.50 else
                "normal"
            ),
            "source": context.user_data["platform"]
        }

        user["bets"].append(bet)
        user["banks"][context.user_data["platform"]] -= context.user_data["amount"]
        save_data()

        context.user_data.clear()

        await update.message.reply_text(
            f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {bet['match']}, {bet['amount']}‚Ç¨, –∫—ç—Ñ {bet['coeff']} ({'#' + bet['type']})\n"
            f"üí∞ –ë–∞–Ω–∫ {bet['source']}: {user['banks'][bet['source']]:.2f}‚Ç¨"
        )

        if reminder_time:
            context.application.job_queue.run_once(
                lambda ctx: ctx.bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É: {match}"),
                when=dt - now
            )
            await update.message.reply_text(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt.strftime('%d.%m %H:%M')}")
