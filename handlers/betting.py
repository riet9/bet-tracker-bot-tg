from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import datetime
from utils.storage import get_user, save_data, LATVIA_TZ
from utils.auth import require_auth

@require_auth
async def bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ª–æ–≥–∏–Ω, –æ—á–∏—â–∞–µ–º —à–∞–≥–∏ —Å—Ç–∞–≤–∫–∏
    auth = context.user_data.get("authorized")
    login = context.user_data.get("login")
    context.user_data.clear()
    context.user_data["authorized"] = auth
    context.user_data["login"] = login
    context.user_data["bet_step"] = "sport"

    keyboard = [
        [InlineKeyboardButton("CS2", callback_data="sport_CS2")],
        [InlineKeyboardButton("–§—É—Ç–±–æ–ª", callback_data="sport_–§—É—Ç–±–æ–ª")],
        [InlineKeyboardButton("–•–æ–∫–∫–µ–π", callback_data="sport_–•–æ–∫–∫–µ–π")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="sport_other")]
    ]

    await update.message.reply_text(
        "‚öΩ –í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def bet_step_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        data = query.data
        chat_id = str(query.message.chat.id)

        if data.startswith("sport_"):
            sport = data.split("_")[1]
            if sport == "other":
                context.user_data["bet_step"] = "sport_manual"
                await query.message.reply_text("–í–≤–µ–¥–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –≤—Ä—É—á–Ω—É—é:")
                return
            context.user_data["sport"] = sport
            context.user_data["bet_step"] = "match"
            await query.message.reply_text(f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n–í–≤–µ–¥–∏ –º–∞—Ç—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: NaVi vs G2)")
            return

        if data.startswith("type_"):
            t = data.split("_")[1]
            if t in ["safe", "value"]:
                context.user_data["type"] = t
                await query.message.reply_text(f"‚úÖ –¢–∏–ø —Å—Ç–∞–≤–∫–∏: #{t}")
            else:
                await query.message.reply_text("–¢–∏–ø —Å—Ç–∞–≤–∫–∏ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            context.user_data["bet_step"] = "reminder"
            await query.message.reply_text("üîî –•–æ—á–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? –í–≤–µ–¥–∏ –î–î.–ú–ú –ß–ß:–ú–ú –∏–ª–∏ '–Ω–µ—Ç'")
            return

        if data.startswith("platform_"):
            platform = data.split("_")[1]
            context.user_data["platform"] = platform
            context.user_data["bet_step"] = "amount"
            current_balance = get_user(chat_id)["banks"].get(platform, 0)
            if current_balance == 0:
                context.user_data.clear()
                await query.message.reply_text(f"‚ùå –£ —Ç–µ–±—è 0‚Ç¨ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform}. –°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            await query.message.reply_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ ‚Ç¨:")
            return

    # === TEXT INPUT ===
    message = update.message.text.strip()
    step = context.user_data.get("bet_step")
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    if step == "sport_manual":
        context.user_data["sport"] = message
        context.user_data["bet_step"] = "match"
        await update.message.reply_text(f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {message}\n–í–≤–µ–¥–∏ –º–∞—Ç—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: NaVi vs G2)")
        return

    if step == "match":
        context.user_data["match"] = message
        context.user_data["bet_step"] = "platform"
        keyboard = [
            [InlineKeyboardButton("Optibet", callback_data="platform_optibet")],
            [InlineKeyboardButton("Olybet", callback_data="platform_olybet")],
            [InlineKeyboardButton("Bonus", callback_data="platform_bonus")],
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if step == "amount":
        try:
            amount = float(message)
            platform = context.user_data.get("platform")
            current_balance = user["banks"].get(platform, 0)

            if amount <= 0:
                await update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return

            if amount > current_balance:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform}. –î–æ—Å—Ç—É–ø–Ω–æ: {current_balance:.2f}‚Ç¨"
                )
                return

            context.user_data["amount"] = amount
            context.user_data["bet_step"] = "coeff"

            percentage = (amount / current_balance) * 100
            warning = f"\n‚ö†Ô∏è –≠—Ç–æ {percentage:.1f}% –æ—Ç –±–∞–Ω–∫–∞ {platform}. –£–≤–µ—Ä–µ–Ω?" if percentage >= 20 else ""

            await update.message.reply_text(f"–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:{warning}")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    if step == "coeff":
        try:
            coeff = float(message)
            if coeff < 1:
                raise ValueError
            context.user_data["coeff"] = coeff
            context.user_data["bet_step"] = "type"
            keyboard = [
                [InlineKeyboardButton("#safe", callback_data="type_safe")],
                [InlineKeyboardButton("#value", callback_data="type_value")],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="type_auto")]
            ]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.")
        return

    if step == "reminder":
        match = context.user_data["match"]
        now = datetime.datetime.now(LATVIA_TZ)
        if message.lower() in ["–Ω–µ—Ç", "no"]:
            reminder_time = None
        else:
            try:
                dt = datetime.datetime.strptime(message, "%d.%m %H:%M").replace(tzinfo=LATVIA_TZ)
                if dt < now:
                    raise ValueError
                reminder_time = dt.isoformat()
            except:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú –ß–ß:–ú–ú –∏–ª–∏ '–Ω–µ—Ç'")
                return

        bet = {
            "sport": context.user_data["sport"],
            "match": context.user_data["match"],
            "amount": context.user_data["amount"],
            "coeff": context.user_data["coeff"],
            "type": context.user_data.get("type") or (
                "safe" if context.user_data["coeff"] <= 1.20 else
                "value" if 1.60 <= context.user_data["coeff"] <= 2.50 else
                "normal"
            ),
            "source": context.user_data["platform"],
            "status": "pending",
            "time": now
        }

        user["bets"].append(bet)
        user["banks"][context.user_data["platform"]] -= context.user_data["amount"]
        save_data()
        context.user_data.clear()

        await update.message.reply_text(
            f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {bet['match']}, {bet['amount']}‚Ç¨ @ {bet['coeff']} ({'#' + bet['type']})\n"
            f"üí∞ –ë–∞–Ω–∫ {bet['source']}: {user['banks'][bet['source']]:.2f}‚Ç¨"
        )

        if reminder_time:
            context.application.job_queue.run_once(
                lambda ctx: ctx.bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É: {match}"),
                when=dt - now
            )
            await update.message.reply_text(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt.strftime('%d.%m %H:%M')}")



# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "bet_step" in context.user_data:
        context.user_data.clear()
        await update.message.reply_text("‚ùå –í–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–µ–π—á–∞—Å —Ç—ã –Ω–µ –≤–≤–æ–¥–∏—à—å —Å—Ç–∞–≤–∫—É.")

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
async def pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    pending_bets = [b for b in user["bets"] if b["status"] == "pending"]
    if not pending_bets:
        await update.message.reply_text("‚úÖ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return

    msg = "üìã <b>–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:</b>\n\n"
    for i, b in enumerate(pending_bets, 1):
        dt = datetime.datetime.fromisoformat(b["time"]) if isinstance(b["time"], str) else b["time"]
        msg += f"{i}. {b['match']} ‚Äî {b['amount']}‚Ç¨ @ {b['coeff']} ({dt.strftime('%d.%m %H:%M')})\n"

    await update.message.reply_text(msg, parse_mode="HTML")
