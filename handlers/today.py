from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from datetime import datetime
from utils.storage import get_user
from utils.timezone import LATVIA_TZ

# /today ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ChatGPT
async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ''
    lines = text.splitlines()

    # –ñ–¥—ë–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç–∞–≤–∏—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≤–æ –≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if len(lines) == 1:
        context.user_data['awaiting_today_input'] = True
        await update.message.reply_text(
            'üì• –í—Å—Ç–∞–≤—å –ø—Ä–æ–≥–Ω–æ–∑ (—Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫), –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.'
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ /today
    lines = lines[1:]
    if len(lines) < 2:
        await update.message.reply_text(
            '‚ö†Ô∏è –í—Å—Ç–∞–≤—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ú–∞—Ç—á ‚Äì –∏—Å—Ö–æ–¥ @–∫—ç—Ñ\n–ü–æ—è—Å–Ω–µ–Ω–∏–µ'
        )
        return

    await process_today_lines(update, context, lines)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ ChatGPT
async def process_today_lines(update: Update, context: ContextTypes.DEFAULT_TYPE, lines: list[str]):
    safe, value = [], []
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if '@' not in line:
            i += 1
            continue

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        explanation = start_time = end_time = deadline = stake = ''
        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
        if i+1 < len(lines) and '@' not in lines[i+1]:
            explanation = lines[i+1].strip()
            i += 1
        # –î–æ 4 —Å—Ç—Ä–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for _ in range(4):
            if i+1 >= len(lines):
                break
            nl = lines[i+1].strip()
            ll = nl.lower()
            if ll.startswith('–Ω–∞—á–∞–ª–æ:'):
                start_time = nl
            elif ll.startswith('–æ–∫–æ–Ω—á–∞–Ω–∏–µ:') or ll.startswith('–æ–∫–æ–Ω—á:'):
                end_time = nl
            elif ll.startswith('—Å—Ç–∞–≤–∏—Ç—å –¥–æ:') or ll.startswith('–¥–æ:'):
                deadline = nl
            elif ll.startswith('—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞:'):
                stake = nl
            else:
                break
            i += 1

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        try:
            coeff = float(line.split('@')[-1].strip())
        except:
            coeff = None

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å
        entry = line
        if explanation:
            entry += f"\nüí¨ {explanation}"
        if start_time:
            entry += f"\n‚è∞ {start_time}"
        if end_time:
            entry += f"\n‚è≥ {end_time}"
        if deadline:
            entry += f"\nüïì {deadline}"
        if stake:
            entry += f"\nüíµ {stake}"

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        if coeff:
            if coeff <= 1.20 and len(safe) < 2:
                safe.append(entry)
            elif 1.60 <= coeff <= 2.50 and len(value) < 5:
                value.append(entry)
        i += 1

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = 'üìÖ <b>–°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n'
    if safe:
        msg += '<b>#safe:</b>\n' + ''.join(f"{idx}. {e}\n\n" for idx, e in enumerate(safe, 1))
    if value:
        msg += '<b>#value:</b>\n' + ''.join(f"{idx}. {e}\n\n" for idx, e in enumerate(value, 1))

    total = len(safe) + len(value)
    forms = ('—Å—Ç–∞–≤–∫–∞', '—Å—Ç–∞–≤–∫–∏', '—Å—Ç–∞–≤–æ–∫')
    form = forms[0] if total%10==1 and total%100!=11 else forms[1] if 2<=total%10<=4 and not 12<=total%100<=14 else forms[2]
    msg += f"üí∞ –í—Å–µ–≥–æ: {total} {form}"

    if not safe and not value:
        await update.message.reply_text(
            '‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–æ–º–ø—Ç–∞.'
        )
        return

    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)

# /prompt ‚Äî –≤—ã–±–æ—Ä —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏–ª–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
async def prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton('üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–º–ø—Ç', callback_data='prompt_morning')],
        [InlineKeyboardButton('üåô –í–µ—á–µ—Ä–Ω–∏–π –ø—Ä–æ–º–ø—Ç', callback_data='prompt_evening')]
    ]
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ /prompt
async def prompt_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = str(query.message.chat.id)
    user = get_user(chat_id)
    banks = user.get('banks', {})
    today = datetime.now(LATVIA_TZ).strftime('%d.%m.%Y')

    if query.data == 'prompt_morning':
        text = (
            f"–ù–∞–π–¥–∏ 1‚Äì2 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥—ë–∂–Ω—ã–µ #safe (1.10‚Äì1.25), –¥–æ 5 –ª–æ–≥–∏—á–Ω—ã—Ö #value (1.60‚Äì2.80) –∏ "
            f"–º–∞–∫—Å–∏–º—É–º 2 –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ #sharp (2.80‚Äì3.50) –∏–ª–∏ #wildcard (3.50+) —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}).\n"
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CS2, —Ñ—É—Ç–±–æ–ª, —Ö–æ–∫–∫–µ–π. –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ä–∞–≤–¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Ç–µ–Ω–Ω–∏—Å–µ, –±–∞—Å–∫–µ—Ç–±–æ–ª–µ –∏ –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö ‚Äî —Ç–æ–∂–µ –≤–∫–ª—é—á–∏.\n\n"
            "–ú–æ—è —Ü–µ–ª—å: —Å —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω–∫–∞ –¥–æ–π—Ç–∏ –¥–æ ‚Ç¨800.\n"
            "–ì–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ 70% –±–∞–Ω–∫–∞ –≤ –¥–µ–Ω—å, –µ—Å–ª–∏ —Å—Ç–∞–≤–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã.\n\n"
            "–ë–∞–Ω–∫:\n"
            f"- Optibet: ‚Ç¨{banks.get('optibet',0):.2f}\n"
            f"- Olybet:  ‚Ç¨{banks.get('olybet',0):.2f}\n\n"
            "–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–∏:\n"
            "–ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2 ‚Äì –∏—Å—Ö–æ–¥ @–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç\n"
            "–ö—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É —Å—Ç–∞–≤–∫–∞ –ª–æ–≥–∏—á–Ω–∞.\n"
            "–ù–∞—á–∞–ª–æ: [–≤—Ä–µ–º—è –ø–æ –†–∏–≥–µ], –æ–∫–æ–Ω—á–∞–Ω–∏–µ: ~[–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è]\n"
            "‚è≥ –î–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ‚Ç¨[—Å—É–º–º–∞], [–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞]\n"
            "–¢–µ–≥: #[safe]/#[value]/#[sharp]/#[wildcard]\n\n"
            "‚ùóÔ∏è–¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –∏ –ª–∏–Ω–∏–∏. –ù–µ –¥–æ–±–∞–≤–ª—è–π —Ç–µ–∫—Å—Ç –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫."
        )
    else:
        text = (
            f"–ï—Å—Ç—å –ª–∏ –µ—â—ë 1‚Äì3 –ª–æ–≥–∏—á–Ω—ã—Ö —Å—Ç–∞–≤–∫–∏ (#value, #sharp –∏–ª–∏ #wildcard) –Ω–∞ –≤–µ—á–µ—Ä/–Ω–æ—á—å —Å–µ–≥–æ–¥–Ω—è ({today})?\n"
            "–ü—Ä–æ–≤–µ—Ä—å, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –ø–æ CS2, —Ö–æ–∫–∫–µ—é, NBA, —Ñ—É—Ç–±–æ–ª—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º —Å –≤–µ—á–µ—Ä–Ω–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏.\n\n"
            "–£—á–∏—Ç—ã–≤–∞–π –æ—Å—Ç–∞—Ç–æ–∫ –º–æ–µ–≥–æ –±–∞–Ω–∫–∞:\n"
            f"- Optibet: ‚Ç¨{banks.get('optibet',0):.2f}\n"
            f"- Olybet:  ‚Ç¨{banks.get('olybet',0):.2f}\n\n"
            "–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–∏:\n"
            "–ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2 ‚Äì –∏—Å—Ö–æ–¥ @–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç\n"
            "–ö—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É —Å—Ç–∞–≤–∫–∞ –ª–æ–≥–∏—á–Ω–∞.\n"
            "–ù–∞—á–∞–ª–æ: [–≤—Ä–µ–º—è –ø–æ –†–∏–≥–µ], –æ–∫–æ–Ω—á–∞–Ω–∏–µ: ~[–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è]\n"
            "‚è≥ –î–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ‚Ç¨[—Å—É–º–º–∞], [–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞]\n"
            "–¢–µ–≥: #[value]/#[sharp]/#[wildcard]\n\n"
            "‚ùóÔ∏è–ò—â–∏ –≥–ª—É–±–æ–∫–æ –∏ –≤—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n"
            "‚ùóÔ∏è–ë–µ–∑ –≤–æ–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã—à–µ."
        )

    await query.message.reply_text(text)
