from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from utils.storage import get_user

# /today ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ChatGPT
async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    lines = text.splitlines()

    if len(lines) == 1:
        context.user_data["awaiting_today_input"] = True
        await update.message.reply_text("üì• –í—Å—Ç–∞–≤—å –ø—Ä–æ–≥–Ω–æ–∑ (—Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫), –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    lines = lines[1:]  # —É–±–∏—Ä–∞–µ–º /today
    if len(lines) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í—Å—Ç–∞–≤—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ú–∞—Ç—á ‚Äì –∏—Å—Ö–æ–¥ @–∫—ç—Ñ\n–ü–æ—è—Å–Ω–µ–Ω–∏–µ")
        return

    await process_today_lines(update, context, lines)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ ChatGPT
async def process_today_lines(update: Update, context: ContextTypes.DEFAULT_TYPE, lines: list[str]):
    safe, value = [], []
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if "@" not in line:
            i += 1
            continue

        explanation = ""
        start_time = ""
        end_time = ""
        stake_line = ""

        if i + 1 < len(lines):
            next_line = lines[i + 1].strip()
            if next_line and "@" not in next_line:
                explanation = next_line
                i += 1

        for _ in range(3):
            if i + 1 >= len(lines):
                break
            next_line = lines[i + 1].strip().lower()
            if next_line.startswith("–Ω–∞—á–∞–ª–æ:"):
                start_time = lines[i + 1].strip()
            elif next_line.startswith("–æ–∫–æ–Ω—á–∞–Ω–∏–µ:") or next_line.startswith("–æ–∫–æ–Ω—á:"):
                end_time = lines[i + 1].strip()
            elif next_line.startswith("—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞:"):
                stake_line = lines[i + 1].strip()
            else:
                break
            i += 1

        try:
            coeff = float(line.split("@")[-1].strip())
        except:
            coeff = None

        full_entry = f"{line}"
        if explanation: full_entry += f"\nüí¨ {explanation}"
        if start_time:  full_entry += f"\n‚è∞ {start_time}"
        if end_time:    full_entry += f"\n‚è≥ {end_time}"
        if stake_line:  full_entry += f"\nüíµ {stake_line}"

        if coeff:
            if coeff <= 1.20 and len(safe) < 2:
                safe.append(full_entry)
            elif 1.60 <= coeff <= 2.50 and len(value) < 5:
                value.append(full_entry)

        i += 1

    msg = "üìÖ <b>–°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
    if safe:
        msg += "<b>#safe:</b>\n"
        for idx, entry in enumerate(safe, 1):
            msg += f"{idx}. {entry}\n\n"
    if value:
        msg += "<b>#value:</b>\n"
        for idx, entry in enumerate(value, 1):
            msg += f"{idx}. {entry}\n\n"

    total = len(safe) + len(value)
    msg += f"üí∞ –í—Å–µ–≥–æ: {total} {'—Å—Ç–∞–≤–∫–∞' if total == 1 else '—Å—Ç–∞–≤–∫–∏' if total < 5 else '—Å—Ç–∞–≤–æ–∫'}"

    if not safe and not value:
        await update.message.reply_text("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–æ–º–ø—Ç–∞.")
        return

    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)

# /prompt ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ChatGPT-–ø—Ä–æ–º–ø—Ç–∞
async def prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üí° –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="send_prompt")]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def prompt_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = str(query.message.chat.id)
    user = get_user(chat_id)
    banks = user["banks"]

    prompt_text = (
        "–ù–∞–π–¥–∏ 0‚Äì2 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥—ë–∂–Ω—ã–µ #safe —Å—Ç–∞–≤–∫–∏ –∏ 0‚Äì5 –ª–æ–≥–∏—á–Ω—ã—Ö #value —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ CS2, —Ñ—É—Ç–±–æ–ª—É –∏ —Ö–æ–∫–∫–µ—é.\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –≤ –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö ‚Äî —Ç–æ–∂–µ –≤–∫–ª—é—á–∏.\n\n"
        "–£—á–∏—Ç—ã–≤–∞–π –º–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–Ω–∫:\n"
        f"- üè¶ Optibet: ‚Ç¨{banks['optibet']:.2f}\n"
        f"- üè¶ Olybet: ‚Ç¨{banks['olybet']:.2f}\n\n"
        "–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–∏:\n"
        "–ö–æ–º–∞–Ω–¥–∞1 vs –ö–æ–º–∞–Ω–¥–∞2 ‚Äì –∏—Å—Ö–æ–¥ @–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç\n"
        "–ö—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É —Å—Ç–∞–≤–∫–∞ –ª–æ–≥–∏—á–Ω–∞.\n"
        "–ù–∞—á–∞–ª–æ: [–≤—Ä–µ–º—è –ø–æ –†–∏–≥–µ], –æ–∫–æ–Ω—á–∞–Ω–∏–µ: ~[–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è]\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ‚Ç¨[—Å—É–º–º–∞], [–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞]\n\n"
        "‚ùóÔ∏è–ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–≤–æ–¥–Ω—ã–π –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Ç–µ–∫—Å—Ç. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    )

    await query.message.reply_text(prompt_text)
