from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from auth_config import ALLOWED_USERS
from utils.storage import get_user, save_data, users_data
import json
import os
import subprocess

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID
ADMIN_ID = 2047828228  # ‚Üê –ø–æ—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π chat_id

"""
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)

    if "authorized" in context.user_data and context.user_data["authorized"]:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        return

    if "auth_step" not in context.user_data:
        context.user_data["auth_step"] = "login"
        await update.message.reply_text("üë§ –í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")
        return

    step = context.user_data["auth_step"]
    if step == "login":
        context.user_data["login_attempt"] = update.message.text.strip()
        context.user_data["auth_step"] = "password"
        await update.message.reply_text("üîë –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
        return

    if step == "password":
        login = context.user_data["login_attempt"]
        password = update.message.text.strip()

        if login in ALLOWED_USERS and ALLOWED_USERS[login] == password:
            context.user_data["authorized"] = True
            context.user_data["login"] = login
            user = get_user(chat_id)
            user["login"] = login
            await update.message.reply_text(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!")
            get_user(chat_id)
            save_data()
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–∏—Ö —Å—Ç–∞–≤–æ–∫.\n"
                "–ù–∞–ø–∏—à–∏ /bet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É.\n"
                "–ù–∞–ø–∏—à–∏ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
            )           
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            context.user_data.clear()
    """

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)

    # –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if context.user_data.get("authorized"):
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω
    if "auth_step" not in context.user_data:
        context.user_data["auth_step"] = "login"
        await update.message.reply_text("üë§ –í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")
        return

    step = context.user_data["auth_step"]

    if step == "login":
        context.user_data["login_attempt"] = update.message.text.strip()
        context.user_data["auth_step"] = "password"
        await update.message.reply_text("üîë –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
        return

    if step == "password":
        login = context.user_data.get("login_attempt", "")
        password = update.message.text.strip()

        if login in ALLOWED_USERS and ALLOWED_USERS[login] == password:
            context.user_data["authorized"] = True
            context.user_data["login"] = login

            user = get_user(chat_id)
            user["login"] = login
            save_data()

            context.user_data.pop("auth_step", None)
            context.user_data.pop("login_attempt", None)

            await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {login}!\n–¢—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏ /bet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É.\n"
                "–ò–ª–∏ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            context.user_data.clear()



async def admin_backup_push(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        subprocess.run(["git", "add", "backups/users_data.json"], check=True)
        subprocess.run(["git", "commit", "-m", "Auto backup"], check=True)
        subprocess.run(["git", "push"], check=True)
        await update.message.reply_text("‚úÖ –ë—ç–∫–∞–ø –∑–∞–ø—É—à–µ–Ω –≤ GitHub.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ push: {e}")

"""
# /admin_backup ‚Äî —ç–∫—Å–ø–æ—Ä—Ç users_data.json –≤—Ä—É—á–Ω—É—é
async def admin_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    filename = "users_data_backup.json"
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(users_data, f, indent=2, ensure_ascii=False, default=str)

    await update.message.reply_document(
        document=open(filename, "rb"),
        filename=filename,
        caption="üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è users_data"
    )
"""

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n"
        "üë§ –£ —Ç–µ–±—è –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –∏ –±–∞–Ω–∫ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ\n\n"
        "üéØ <b>–°—Ç–∞–≤–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
        "üü¢ <b>/bet</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É (–ø–æ —à–∞–≥–∞–º)\n"
        "üü¢ <b>/result</b> ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ç–∞–≤–∫—É (‚úÖ –ø–æ–±–µ–¥–∞ / ‚ùå –ø–æ—Ä–∞–∂–µ–Ω–∏–µ)\n"
        "üü¢ <b>/delete</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏\n"
        "üü¢ <b>/undelete</b> ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É\n"
        "üü¢ <b>/pending</b> ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫\n\n"
        "üìÜ <b>–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –¥–µ–Ω—å:</b>\n"
        "üü¢ <b>/today</b> ‚Äî –≤—Å—Ç–∞–≤—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "üü¢ <b>/prompt</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT\n\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
        "üü¢ <b>/stats</b> ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–∞–Ω–∫, winrate, ROI)\n"
        "üü¢ <b>/graph</b> ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –±–∞–Ω–∫–∞\n"
        "üü¢ <b>/safe_stats</b> ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ #safe —Å—Ç–∞–≤–∫–∞–º\n"
        "üü¢ <b>/value_stats</b> ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ #value —Å—Ç–∞–≤–∫–∞–º\n"
        "üü¢ <b>/top_type</b> ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (#safe vs #value)\n"
        "üü¢ <b>/history #type</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ç–∏–ø—É\n"
        "üü¢ <b>/summary</b> ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üü¢ <b>/summary 7d</b> ‚Äî –∑–∞ 7 –¥–Ω–µ–π\n"
        "üü¢ <b>/summary 30d</b> ‚Äî –∑–∞ –º–µ—Å—è—Ü\n"
        "üü¢ <b>/goal</b> ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏ (‚Ç¨800)\n"
        "üü¢ <b>/top_teams</b> ‚Äî –ª—É—á—à–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ROI\n"
        "üü¢ <b>/review</b> ‚Äî –æ–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞–≤–æ–∫\n"
        "\nüìÅ <b>–§–∞–π–ª –∏ –±–∞–Ω–∫:</b>\n"
        "üü¢ <b>/export</b> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –≤ CSV\n"
        "üü¢ <b>/bank [—Å—É–º–º–∞]</b> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–∞–Ω–∫\n\n"
        "‚öôÔ∏è <b>–°–ª—É–∂–µ–±–Ω—ã–µ:</b>\n"
        "üü¢ <b>/info</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "üü¢ <b>/cancel</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏\n"
        "üü¢ <b>/users_count</b> ‚Äî —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞\n\n"
        "üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏.\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–ª–µ–¥—É–π –ø–æ—à–∞–≥–æ–≤—ã–º –ø–æ–¥—Å–∫–∞–∑–∫–∞–º.",
        parse_mode=ParseMode.HTML
    )

async def bank_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    banks = user["banks"]

    if len(context.args) == 2:
        name, amount_str = context.args
        name = name.lower()
        if name not in banks:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –±–∞–Ω–∫: optibet, olybet –∏–ª–∏ bonus.")
            return
        try:
            amount = float(amount_str)
            if amount < 0:
                await update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
                return
            banks[name] = amount
            save_data()
            await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {name} = {amount:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    elif len(context.args) == 0:
        total = sum(banks.values())
        msg = (
            f"üí∞ –ë–∞–Ω–∫–∏:\n"
            f"üè¶ Optibet: {banks['optibet']:.2f}‚Ç¨\n"
            f"üè¶ Olybet: {banks['olybet']:.2f}‚Ç¨\n"
            f"üéÅ –ë–æ–Ω—É—Å—ã: {banks['bonus']:.2f}‚Ç¨\n"
            f"üìä –í—Å–µ–≥–æ: {total:.2f}‚Ç¨"
        )
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π:\n/bank optibet 20 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ /bank")

async def users_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
