import datetime
import csv
import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from utils.storage import get_user

# /stats ‚Äî –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    banks = user["banks"]
    completed = [b for b in user["bets"] if b["status"] != "pending"]
    wins = [b for b in completed if b["status"] == "win"]
    losses = [b for b in completed if b["status"] == "lose"]

    total = len(completed)
    roi = sum((b["amount"] * b["coeff"] - b["amount"]) if b["status"] == "win" else -b["amount"] for b in completed)
    avg_coeff = sum(b["coeff"] for b in completed) / total if total else 0
    winrate = len(wins) / total * 100 if total else 0
    total_bets = sum(b["amount"] for b in completed)
    total_bank = sum(banks.values())

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üè¶ Optibet: {banks['optibet']:.2f}‚Ç¨\n"
        f"üè¶ Olybet: {banks['olybet']:.2f}‚Ç¨\n"
        f"üéÅ –ë–æ–Ω—É—Å—ã: {banks['bonus']:.2f}‚Ç¨\n"
        f"üìä –í—Å–µ–≥–æ –±–∞–Ω–∫: {total_bank:.2f}‚Ç¨\n\n"
        f"üéØ –°—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total}\n"
        f"‚úÖ –ü–æ–±–µ–¥: {len(wins)} | ‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {len(losses)}\n"
        f"üìà Winrate: {winrate:.1f}%\n"
        f"üìâ –°—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ: {avg_coeff:.2f}\n"
        f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {total_bets:.2f}‚Ç¨\n"
        f"üì• ROI: {roi:.2f}‚Ç¨"
    )

# /summary ‚Äî –æ—Ç—á—ë—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É
async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    banks = user["banks"]
    now = datetime.datetime.now()
    period = context.args[0] if context.args else "today"

    if period == "today":
        filtered = [b for b in user["bets"] if datetime.datetime.fromisoformat(b["time"]).date() == now.date()]
        label = "–°–µ–≥–æ–¥–Ω—è"
    elif period == "7d":
        cutoff = now - datetime.timedelta(days=7)
        filtered = [b for b in user["bets"] if datetime.datetime.fromisoformat(b["time"]) >= cutoff]
        label = "–ó–∞ 7 –¥–Ω–µ–π"
    elif period == "30d":
        cutoff = now - datetime.timedelta(days=30)
        filtered = [b for b in user["bets"] if datetime.datetime.fromisoformat(b["time"]) >= cutoff]
        label = "–ó–∞ 30 –¥–Ω–µ–π"
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π:\n/summary, /summary 7d, /summary 30d")
        return

    completed = [b for b in filtered if b["status"] != "pending"]
    wins = [b for b in completed if b["status"] == "win"]
    losses = [b for b in completed if b["status"] == "lose"]
    profit = sum((b["amount"] * b["coeff"] - b["amount"]) if b["status"] == "win" else -b["amount"] for b in completed)
    total_bank = sum(banks.values())

    await update.message.reply_text(
        f"üìÜ <b>{label}:</b>\n"
        f"üìã –°—Ç–∞–≤–æ–∫: {len(filtered)} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed)})\n"
        f"‚úÖ –ü–æ–±–µ–¥—ã: {len(wins)} | ‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {len(losses)}\n"
        f"üí∏ –ü—Ä–∏–±—ã–ª—å: {profit:.2f}‚Ç¨\n\n"
        f"üè¶ Optibet: {banks['optibet']:.2f}‚Ç¨\n"
        f"üè¶ Olybet: {banks['olybet']:.2f}‚Ç¨\n"
        f"üéÅ –ë–æ–Ω—É—Å—ã: {banks['bonus']:.2f}‚Ç¨\n"
        f"üìä –í—Å–µ–≥–æ –±–∞–Ω–∫: {total_bank:.2f}‚Ç¨",
        parse_mode=ParseMode.HTML
    )

# /history ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ç–∏–ø—É
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n/history #safe –∏–ª–∏ /history #value")
        return

    bet_type = context.args[0].lstrip("#").lower()
    if bet_type not in ["safe", "value", "normal"]:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –î–æ—Å—Ç—É–ø–Ω—ã: #safe, #value, #normal")
        return

    filtered = [b for b in user["bets"] if b.get("type") == bet_type and b["status"] != "pending"]
    if not filtered:
        await update.message.reply_text(f"üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö #{bet_type} —Å—Ç–∞–≤–æ–∫.")
        return

    message = f"üìñ <b>–ò—Å—Ç–æ—Ä–∏—è #{bet_type} —Å—Ç–∞–≤–æ–∫:</b>\n\n"
    for b in filtered[-10:]:
        dt = datetime.datetime.fromisoformat(b["time"]) if isinstance(b["time"], str) else b["time"]
        status = "‚úÖ" if b["status"] == "win" else "‚ùå"
        message += f"{status} {b['match']} ‚Äî {b['amount']}‚Ç¨ @ {b['coeff']} ({dt.strftime('%d.%m %H:%M')})\n"

    await update.message.reply_text(message, parse_mode=ParseMode.HTML)

# /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    if not user["bets"]:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    filename = f"bets_export_{chat_id}.csv"
    with open(filename, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["–î–∞—Ç–∞", "–ú–∞—Ç—á", "–°—É–º–º–∞ (‚Ç¨)", "–ö–æ—ç—Ñ", "–°—Ç–∞—Ç—É—Å", "–¢–∏–ø"])
        for b in user["bets"]:
            dt = datetime.datetime.fromisoformat(b["time"]) if isinstance(b["time"], str) else b["time"]
            writer.writerow([
                dt.strftime("%Y-%m-%d %H:%M"),
                b["match"], b["amount"], b["coeff"],
                b["status"], b.get("type", "‚Äî")
            ])

    await update.message.reply_document(document=open(filename, "rb"), filename=filename)

# /graph ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—Å—Ç–∞ –±–∞–Ω–∫–∞
async def graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    completed = [b for b in user["bets"] if b["status"] != "pending"]
    if not completed:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.")
        return

    x, y = [], []
    value = 10.0
    for b in completed:
        dt = datetime.datetime.fromisoformat(b["time"]) if isinstance(b["time"], str) else b["time"]
        x.append(dt.strftime("%d.%m %H:%M"))
        value += (b["amount"] * b["coeff"]) if b["status"] == "win" else -b["amount"]
        y.append(value)

    plt.figure(figsize=(8, 4))
    plt.plot(x, y, marker="o")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.title("üìà –†–æ—Å—Ç –±–∞–Ω–∫–∞")
    plt.tight_layout()
    plt.savefig("graph.png")
    plt.close()

    await update.message.reply_photo(photo=open("graph.png", "rb"))
