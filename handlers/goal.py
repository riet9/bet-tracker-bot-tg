from telegram import Update
from telegram.ext import ContextTypes
from utils.storage import get_user, save_data

# /goal [—Ü–µ–ª—å] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ –ø–æ–∫–∞–∑ —Ü–µ–ª–∏
async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å
    if context.args:
        try:
            target = float(context.args[0])
            if target <= 0:
                raise ValueError
            user["goal"] = target
            save_data()
            await update.message.reply_text(f"üéØ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: /goal 800")
        return

    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ /goal ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    goal_value = user.get("goal")
    if not goal_value:
        await update.message.reply_text("üéØ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ —Ü–µ–ª—å. –ù–∞–ø–∏—à–∏ /goal 800, –Ω–∞–ø—Ä–∏–º–µ—Ä.")
        return

    total_bank = sum(user["banks"].values())
    progress = min(100.0, total_bank / goal_value * 100)

    bar = progress_bar(progress)

    await update.message.reply_text(
        f"üéØ –¶–µ–ª—å: {goal_value:.2f}‚Ç¨\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {total_bank:.2f}‚Ç¨\n"
        f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
        f"{bar}"
    )

def progress_bar(percentage: float) -> str:
    filled = int(percentage // 5)
    empty = 20 - filled
    return "‚ñì" * filled + "‚ñë" * empty + f" {percentage:.1f}%"
