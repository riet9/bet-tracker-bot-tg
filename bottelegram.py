import logging
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import datetime, csv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞–≤–æ–∫ –∏ –±–∞–Ω–∫–∞
bank = 10.0
bets = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫. –ù–∞–ø–∏—à–∏ /bet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É.")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/bet ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏: –ú–∞—Ç—á, –°—É–º–º–∞, –ö—ç—Ñ)\n"
        "/result ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤–≤–µ—Å—Ç–∏ –µ—ë —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ)\n"
        "/stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –±–∞–Ω–∫, winrate, ROI\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –≤ —Ñ–∞–π–ª CSV\n"
        "/info ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏"
    )

async def bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å—Ç–∞–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ú–∞—Ç—á: NaVi vs BIG\n–°—É–º–º–∞: 2\n–ö—ç—Ñ: 1.7")

async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for i, b in enumerate(bets):
        if b["status"] == "pending":
            keyboard.append([InlineKeyboardButton(f"{b['match']} ({b['amount']}‚Ç¨, –∫—ç—Ñ {b['coeff']})", callback_data=f"select_{i}")])
    if not keyboard:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bank
    query = update.callback_query
    await query.answer()

    if query.data.startswith("select_"):
        index = int(query.data.split("_")[1])
        context.user_data["selected_bet"] = index
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–±–µ–¥–∞", callback_data='result_win'),
                InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", callback_data='result_lose')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: {bets[index]['match']}\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", reply_markup=reply_markup)

    elif query.data in ["result_win", "result_lose"]:
        index = context.user_data.get("selected_bet")
        if index is None or index >= len(bets):
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        bet = bets[index]
        if bet["status"] != "pending":
            await query.edit_message_text("–≠—Ç–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        if query.data == "result_win":
            profit = bet["amount"] * bet["coeff"]
            bank += profit
            bet["status"] = "win"
            await query.edit_message_text(f"‚úÖ –ü–æ–±–µ–¥–∞ –ø–æ —Å—Ç–∞–≤–∫–µ: {bet['match']}\n+{profit:.2f}‚Ç¨\nüí∞ –ù–æ–≤—ã–π –±–∞–Ω–∫: {bank:.2f}‚Ç¨")
        else:
            bet["status"] = "lose"
            await query.edit_message_text(f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–≤–∫–µ: {bet['match']}\n-{bet['amount']:.2f}‚Ç¨\nüí∞ –ù–æ–≤—ã–π –±–∞–Ω–∫: {bank:.2f}‚Ç¨")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bets, bank
    text = update.message.text
    if text.lower().startswith("–º–∞—Ç—á"):
        try:
            lines = text.split('\n')
            match = lines[0].split(":")[1].strip()
            amount = float(lines[1].split(":")[1].strip())
            coeff = float(lines[2].split(":")[1].strip())
            bet_time = datetime.datetime.now()
            bets.append({"match": match, "amount": amount, "coeff": coeff, "status": "pending", "time": bet_time})
            bank -= amount
            await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {match}, {amount}‚Ç¨, –∫—ç—Ñ {coeff}\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π:\n–ú–∞—Ç—á: ...\n–°—É–º–º–∞: ...\n–ö—ç—Ñ: ...")


if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("bet", bet))
    app.add_handler(CommandHandler("result", result))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –£–¥–∞–ª—ë–Ω –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–µ

    app.run_polling()
