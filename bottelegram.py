import logging
import os
import datetime
import csv

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, filters
)

from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

bank = 10.0
bets = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫. –ù–∞–ø–∏—à–∏ /bet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É.")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/bet ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É\n"
        "/result ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "/stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–Ω–∫, winrate, ROI\n"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV\n"
        "/info ‚Äî —ç—Ç–æ –º–µ–Ω—é"
    )

async def bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å—Ç–∞–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ú–∞—Ç—á: NaVi vs G2\n–°—É–º–º–∞: 2\n–ö—ç—Ñ: 1.75")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bets, bank
    text = update.message.text
    if text.lower().startswith("–º–∞—Ç—á"):
        try:
            lines = text.split('\n')
            match = lines[0].split(":")[1].strip()
            amount = float(lines[1].split(":")[1].strip())
            coeff = float(lines[2].split(":")[1].strip())
            bet_time = datetime.datetime.now()
            bets.append({
                "match": match,
                "amount": amount,
                "coeff": coeff,
                "status": "pending",
                "time": bet_time
            })
            bank -= amount
            await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {match}, {amount}‚Ç¨, –∫—ç—Ñ {coeff}\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n–ú–∞—Ç—á: NaVi vs G2\n–°—É–º–º–∞: 2\n–ö—ç—Ñ: 1.75")

async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for i, b in enumerate(bets):
        if b["status"] == "pending":
            keyboard.append([
                InlineKeyboardButton(f"{b['match']} ({b['amount']}‚Ç¨, –∫—ç—Ñ {b['coeff']})", callback_data=f"select_{i}")
            ])
    if not keyboard:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.")
        return
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bank
    query = update.callback_query
    await query.answer()

    if query.data.startswith("select_"):
        index = int(query.data.split("_")[1])
        context.user_data["selected_bet"] = index
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–±–µ–¥–∞", callback_data='result_win'),
             InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", callback_data='result_lose')]
        ]
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: {bets[index]['match']}\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data in ["result_win", "result_lose"]:
        index = context.user_data.get("selected_bet")
        if index is None or index >= len(bets):
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        bet = bets[index]
        if bet["status"] != "pending":
            await query.edit_message_text("–≠—Ç–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        if query.data == "result_win":
            profit = bet["amount"] * bet["coeff"]
            bank += profit
            bet["status"] = "win"
            await query.edit_message_text(f"‚úÖ –ü–æ–±–µ–¥–∞: {bet['match']}\n+{profit:.2f}‚Ç¨\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")
        else:
            bet["status"] = "lose"
            await query.edit_message_text(f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ: {bet['match']}\n-{bet['amount']:.2f}‚Ç¨\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    wins = sum(1 for b in bets if b["status"] == "win")
    total = sum(1 for b in bets if b["status"] != "pending")
    roi = sum((b["amount"] * b["coeff"] - b["amount"]) if b["status"] == "win" else -b["amount"]
              for b in bets if b["status"] != "pending")
    winrate = (wins / total * 100) if total > 0 else 0
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ë–∞–Ω–∫: {bank:.2f}‚Ç¨\n–°—Ç–∞–≤–æ–∫: {total}\n–í—ã–∏–≥—Ä–∞–Ω–æ: {wins}\nWinrate: {winrate:.1f}%\nROI: {roi:.2f}‚Ç¨"
    )

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("bets_export.csv", mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["–î–∞—Ç–∞", "–ú–∞—Ç—á", "–°—É–º–º–∞", "–ö—ç—Ñ", "–°—Ç–∞—Ç—É—Å"])
        for b in bets:
            writer.writerow([
                b['time'].strftime("%Y-%m-%d %H:%M"),
                b['match'], b['amount'], b['coeff'], b['status']
            ])
    await update.message.reply_document(document=open("bets_export.csv", "rb"), filename="bets_export.csv")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("bet", bet))
    app.add_handler(CommandHandler("result", result))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()
