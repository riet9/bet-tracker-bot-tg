import logging
import os
import datetime
import csv
import json
import matplotlib.pyplot as plt

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, filters
)
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

DATA_FILE = "users_data.json"
users_data = {}

def load_data():
    global users_data
    try:
        with open(DATA_FILE, "r") as f:
            users_data = json.load(f)
    except FileNotFoundError:
        users_data = {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(users_data, f, indent=2, default=str)

def get_user(chat_id: str):
    chat_id = str(chat_id)
    if chat_id not in users_data:
        users_data[chat_id] = {"bank": 10.0, "bets": []}
    return users_data[chat_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    get_user(chat_id)
    save_data()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–∏—Ö —Å—Ç–∞–≤–æ–∫.\n"
        "–ù–∞–ø–∏—à–∏ /bet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É.\n"
        "–ù–∞–ø–∏—à–∏ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "üë§ –£ —Ç–µ–±—è –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å ‚Äî —Å—Ç–∞–≤–∫–∏ –∏ –±–∞–Ω–∫ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ\n\n"
        "üü¢ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "üü¢ /bet ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ —à–∞–≥–∞–º (–º–∞—Ç—á, —Å—É–º–º–∞, –∫—ç—Ñ)\n"
        "üü¢ /result ‚Äî –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏ (‚úÖ/‚ùå)\n"
        "üü¢ /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (winrate, ROI, –±–∞–Ω–∫)\n"
        "üü¢ /graph ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –±–∞–Ω–∫–∞\n"
        "üü¢ /summary ‚Äî –¥–Ω–µ–≤–Ω–æ–π/–Ω–µ–¥–µ–ª—å–Ω—ã–π/–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç\n"
        "üü¢ /safe_stats, /value_stats ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø—É —Å—Ç–∞–≤–æ–∫\n"
        "üü¢ /top_type ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π\n"
        "üü¢ /history #safe ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ —Ç–∏–ø—É\n"
        "üü¢ /bank [—Å—É–º–º–∞] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–∞–Ω–∫\n"
        "üü¢ /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ .csv\n"
        "üü¢ /users_count ‚Äî —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞\n"
        "üü¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏\n",
        parse_mode="HTML"
    )

async def bank_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    if context.args:
        try:
            new_bank = float(context.args[0])
            if new_bank < 0:
                await update.message.reply_text("‚ö†Ô∏è –ë–∞–Ω–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
                return
            user["bank"] = new_bank
            save_data()
            await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –±–∞–Ω–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_bank:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä:\n/bank 15")
    else:
        await update.message.reply_text(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {user['bank']:.2f}‚Ç¨")

async def bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["bet_step"] = "match"
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ (–ø—Ä–∏–º–µ—Ä: NaVi vs G2)")

async def bet_step_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    step = context.user_data.get("bet_step")

    if step == "match":
        context.user_data["match"] = update.message.text.strip()
        context.user_data["bet_step"] = "amount"
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ ‚Ç¨ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)")

    elif step == "amount":
        try:
            amount = float(update.message.text.strip())
            if amount <= 0:
                await update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return
            if amount > user["bank"]:
                await update.message.reply_text(f"‚ö†Ô∏è –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {user['bank']:.2f}‚Ç¨.")
                return
            context.user_data["amount"] = amount
            context.user_data["bet_step"] = "coeff"

            percentage = (amount / user["bank"]) * 100
            warning = f"\n‚ö†Ô∏è –≠—Ç–æ {percentage:.1f}% –æ—Ç –±–∞–Ω–∫–∞. –£–≤–µ—Ä–µ–Ω?" if percentage >= 20 else ""
            await update.message.reply_text(f"–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.85){warning}")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    elif step == "coeff":
        try:
            coeff = float(update.message.text.strip())
            if coeff < 1:
                await update.message.reply_text("‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1.00")
                return

            match = context.user_data["match"]
            amount = context.user_data["amount"]
            bet_time = datetime.datetime.now()

            if coeff <= 1.20:
                bet_type = "safe"
            elif 1.60 <= coeff <= 2.50:
                bet_type = "value"
            else:
                bet_type = "normal"

            user["bets"].append({
                "match": match,
                "amount": amount,
                "coeff": coeff,
                "status": "pending",
                "time": bet_time,
                "type": bet_type
            })

            user["bank"] -= amount
            context.user_data.clear()
            save_data()

            context.application.job_queue.run_once(
                remind_result,
                when=datetime.timedelta(hours=24),
                data={"chat_id": chat_id, "match": match}
            )

            await update.message.reply_text(
                f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {match}, {amount}‚Ç¨, –∫—ç—Ñ {coeff} ({'#' + bet_type})\n"
                f"üí∞ –ù–æ–≤—ã–π –±–∞–Ω–∫: {user['bank']:.2f}‚Ç¨"
            )
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç.")
async def remind_result(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    chat_id = data["chat_id"]
    match = data["match"]
    await context.bot.send_message(chat_id=chat_id,
        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏: {match}\n–ù–∞–ø–∏—à–∏ /result")

async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)

    keyboard = []
    for i, b in enumerate(user["bets"]):
        if b["status"] == "pending":
            keyboard.append([InlineKeyboardButton(
                f"{b['match']} ({b['amount']}‚Ç¨ @ {b['coeff']})", callback_data=f"res_{i}"
            )])
    if not keyboard:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.")
        return
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = str(query.message.chat.id)
    user = get_user(chat_id)

    data = query.data
    if data.startswith("res_"):
        index = int(data.split("_")[1])
        context.user_data["selected"] = index
        keyboard = [[
            InlineKeyboardButton("‚úÖ –ü–æ–±–µ–¥–∞", callback_data="win"),
            InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", callback_data="lose")
        ]]
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: {user['bets'][index]['match']}",
                                      reply_markup=InlineKeyboardMarkup(keyboard))

    elif data in ["win", "lose"]:
        index = context.user_data.get("selected")
        if index is None: return
        bet = user["bets"][index]
        if bet["status"] != "pending":
            await query.edit_message_text("–°—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        if data == "win":
            profit = bet["amount"] * bet["coeff"]
            user["bank"] += profit
            bet["status"] = "win"
            msg = f"‚úÖ –ü–æ–±–µ–¥–∞: {bet['match']}\n+{profit:.2f}‚Ç¨"
        else:
            bet["status"] = "lose"
            msg = f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ: {bet['match']}\n-{bet['amount']:.2f}‚Ç¨"

        save_data()
        await query.edit_message_text(msg + f"\nüí∞ –ù–æ–≤—ã–π –±–∞–Ω–∫: {user['bank']:.2f}‚Ç¨")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    completed = [b for b in user["bets"] if b["status"] != "pending"]
    wins = [b for b in completed if b["status"] == "win"]
    losses = [b for b in completed if b["status"] == "lose"]

    total = len(completed)
    roi = sum((b["amount"] * b["coeff"] - b["amount"]) if b["status"] == "win" else -b["amount"] for b in completed)
    avg_coeff = sum(b["coeff"] for b in completed) / total if total else 0
    winrate = len(wins) / total * 100 if total else 0
    total_bets = sum(b["amount"] for b in completed)

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üí∞ –ë–∞–Ω–∫: {user['bank']:.2f}‚Ç¨\n"
        f"üéØ –°—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total}\n"
        f"‚úÖ –ü–æ–±–µ–¥: {len(wins)} | ‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {len(losses)}\n"
        f"üìà Winrate: {winrate:.1f}%\n"
        f"üìâ –°—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ: {avg_coeff:.2f}\n"
        f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {total_bets:.2f}‚Ç¨\n"
        f"üì• ROI: {roi:.2f}‚Ç¨"
    )

async def users_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")

async def graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    user = get_user(chat_id)
    completed = [b for b in user["bets"] if b["status"] != "pending"]
    if not completed:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.")
        return

    x, y = [], []
    value = 10.0
    for b in completed:
        dt = datetime.datetime.fromisoformat(b["time"]) if isinstance(b["time"], str) else b["time"]
        x.append(dt.strftime("%d.%m %H:%M"))
        value += (b["amount"] * b["coeff"]) if b["status"] == "win" else -b["amount"]
        y.append(value)

    plt.figure(figsize=(8, 4))
    plt.plot(x, y, marker="o")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.title("üìà –†–æ—Å—Ç –±–∞–Ω–∫–∞")
    plt.tight_layout()
    plt.savefig("graph.png")
    plt.close()

    await update.message.reply_photo(photo=open("graph.png", "rb"))

# ‚Äî‚Äî‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ‚Äî‚Äî‚Äî #
if __name__ == '__main__':
    load_data()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("bank", bank_command))
    app.add_handler(CommandHandler("bet", bet))
    app.add_handler(CommandHandler("result", result))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("users_count", users_count))
    app.add_handler(CommandHandler("graph", graph))

    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bet_step_handler))

    app.run_polling()
