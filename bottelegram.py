import logging
import os
import datetime
import csv
import json
import matplotlib.pyplot as plt

DATA_FILE = "data.json"

def load_data():
    global bank, bets
    try:
        with open(DATA_FILE, "r") as file:
            data = json.load(file)
            bank = data.get("bank", 10.0)
            bets = data.get("bets", [])
    except FileNotFoundError:
        bank = 10.0
        bets = []

def save_data():
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r") as original:
                content = original.read()
            with open("data_backup.json", "w") as backup:
                backup.write(content)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(DATA_FILE, "w") as file:
        json.dump({"bank": bank, "bets": bets}, file, indent=2, default=str)


from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, filters
)

from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

bank = 10.0
bets = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫. –ù–∞–ø–∏—à–∏ /bet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É. \n /info - —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "üü¢ <b>/start</b> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "üü¢ <b>/bet</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ —à–∞–≥–∞–º (–º–∞—Ç—á, —Å—É–º–º–∞, –∫—ç—Ñ)\n"
        "üü¢ <b>/result</b> ‚Äî –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (‚úÖ –∏–ª–∏ ‚ùå)\n"
        "üü¢ <b>/stats</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: winrate, ROI, —Å—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ –∏ –±–∞–Ω–∫\n"
        "üü¢ <b>/export</b> ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –≤ CSV\n"
        "üü¢ <b>/graph</b> ‚Äî –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –±–∞–Ω–∫–∞ –ø–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º\n"
        "üü¢ <b>/bank [—Å—É–º–º–∞]</b> ‚Äî –≤—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–Ω–∫\n"
        "üü¢ <b>/info</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "üü¢ <b>/cancel</b> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ\n"
        "üü¢ <b>/delete</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫\n"
        "üü¢ <b>/undelete</b> ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É (–µ—Å–ª–∏ —É–¥–∞–ª–∏–ª —Å–ª—É—á–∞–π–Ω–æ)\n"
        "üü¢ <b>/pending</b> ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ (–µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö)\n"
        "\nüìÅ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º"
    , parse_mode="HTML")

    
async def bank_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bank
    if context.args:
        try:
            new_bank = float(context.args[0])
            if new_bank < 0:
                await update.message.reply_text("‚ö†Ô∏è –ë–∞–Ω–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
                return
            bank = new_bank
            save_data()
            await update.message.reply_text(f"‚úÖ –ù–æ–≤—ã–π –±–∞–Ω–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bank:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä:\n/bank 15")
    else:
        await update.message.reply_text(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {bank:.2f}‚Ç¨\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏:\n/bank 20")

async def graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    completed_bets = [b for b in bets if b["status"] != "pending"]
    if not completed_bets:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    x = []
    y = []
    current = 10.0  # –Ω–∞—á–Ω–µ–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞

    for b in completed_bets:
        x.append(b["time"].strftime("%Y-%m-%d %H:%M"))
        if b["status"] == "win":
            current += b["amount"] * b["coeff"]
        else:
            current -= b["amount"]
        y.append(current)

    plt.figure(figsize=(8, 4))
    plt.plot(x, y, marker="o")
    plt.xticks(rotation=45, ha='right')
    plt.title("üìà –†–æ—Å—Ç –±–∞–Ω–∫–∞ –ø–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º —Å—Ç–∞–≤–∫–∞–º")
    plt.xlabel("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
    plt.ylabel("–ë–∞–Ω–∫ (‚Ç¨)")
    plt.grid(True)
    plt.tight_layout()
    plt.savefig("bank_graph.png")
    plt.close()

    await update.message.reply_photo(photo=open("bank_graph.png", "rb"))


# –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /bet
async def bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["bet_step"] = "match"
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ (–ø—Ä–∏–º–µ—Ä: NaVi vs G2)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
async def bet_step_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bets, bank
    step = context.user_data.get("bet_step")

    if step == "match":
        context.user_data["match"] = update.message.text.strip()
        context.user_data["bet_step"] = "amount"
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ ‚Ç¨ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)")

    elif step == "amount":
        try:
            amount = float(update.message.text.strip())
            if amount <= 0:
                await update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                return
            if amount > bank:
                await update.message.reply_text(f"‚ö†Ô∏è –£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ {bank:.2f}‚Ç¨. –í–≤–µ–¥–∏ –º–µ–Ω—å—à—É—é —Å—É–º–º—É.")
                return
            context.user_data["amount"] = amount
            context.user_data["bet_step"] = "coeff"
            await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.85)")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 2.5")

    elif step == "coeff":
        try:
            coeff = float(update.message.text.strip())
            if coeff < 1:
                await update.message.reply_text("‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1.00")
                return

            match = context.user_data["match"]
            amount = context.user_data["amount"]
            bet_time = datetime.datetime.now()

            bets.append({
                "match": match,
                "amount": amount,
                "coeff": coeff,
                "status": "pending",
                "time": bet_time
            })

            bank -= amount
            context.user_data.clear()
            save_data()
            
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            job_queue.run_once(
                remind_result,
                when=datetime.timedelta(hours=24),
                data={"chat_id": update.effective_chat.id, "match": match}
            )
            
            await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {match}, {amount}‚Ç¨, –∫—ç—Ñ {coeff}\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç. –ü—Ä–∏–º–µ—Ä: 1.75")
        

async def pending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pending_bets = [b for b in bets if b["status"] == "pending"]

    if not pending_bets:
        await update.message.reply_text("‚úÖ –í—Å–µ —Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return

    message = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:</b>\n\n"
    for i, b in enumerate(pending_bets, 1):
        date_str = b['time'].strftime("%d.%m %H:%M")
        message += f"{i}. {b['match']} ‚Äî {b['amount']}‚Ç¨ @ {b['coeff']} ({date_str})\n"

    await update.message.reply_text(message, parse_mode="HTML")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for i, b in enumerate(bets):
        if b["status"] == "pending":
            keyboard.append([
                InlineKeyboardButton(
                    f"{b['match']} ({b['amount']}‚Ç¨, @ {b['coeff']})",
                    callback_data=f"del_{i}"
                )
            ])
    if not keyboard:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    await update.message.reply_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def undelete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for i, b in enumerate(bets):
        if b["status"] == "deleted":
            keyboard.append([
                InlineKeyboardButton(
                    f"{b['match']} ({b['amount']}‚Ç¨, @ {b['coeff']})",
                    callback_data=f"undel_{i}"
                )
            ])
    if not keyboard:
        await update.message.reply_text("üì¶ –ù–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    await update.message.reply_text(
        "‚ôªÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "bet_step" in context.user_data:
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bets, bank
    text = update.message.text
    if text.lower().startswith("–º–∞—Ç—á"):
        try:
            lines = text.split('\n')
            match = lines[0].split(":")[1].strip()
            amount = float(lines[1].split(":")[1].strip())
            coeff = float(lines[2].split(":")[1].strip())
            bet_time = datetime.datetime.now()
            bets.append({
                "match": match,
                "amount": amount,
                "coeff": coeff,
                "status": "pending",
                "time": bet_time
            })
            bank -= amount
            await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {match}, {amount}‚Ç¨, –∫—ç—Ñ {coeff}\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n–ú–∞—Ç—á: NaVi vs G2\n–°—É–º–º–∞: 2\n–ö—ç—Ñ: 1.75")

async def result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for i, b in enumerate(bets):
        if b["status"] == "pending":
            keyboard.append([
                InlineKeyboardButton(f"{b['match']} ({b['amount']}‚Ç¨, –∫—ç—Ñ {b['coeff']})", callback_data=f"select_{i}")
            ])
    if not keyboard:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫.")
        return
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bank
    query = update.callback_query
    await query.answer()

    if query.data.startswith("select_"):
        index = int(query.data.split("_")[1])
        context.user_data["selected_bet"] = index
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–±–µ–¥–∞", callback_data='result_win'),
             InlineKeyboardButton("‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", callback_data='result_lose')]
        ]
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞: {bets[index]['match']}\n–í—ã–±–µ—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    elif query.data.startswith("del_"):
        index = int(query.data.split("_")[1])
        if index >= len(bets) or bets[index]["status"] != "pending":
            await query.edit_message_text("‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –±–∞–Ω–∫
        global bank
        bank += bets[index]["amount"]
        bets[index]["status"] = "deleted"
        save_data()

        await query.edit_message_text(
            f"‚ùå –°—Ç–∞–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {bets[index]['match']}\nüí∞ –ë–∞–Ω–∫ –≤–æ–∑–≤—Ä–∞—â—ë–Ω: {bets[index]['amount']}‚Ç¨\n–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {bank:.2f}‚Ç¨"
        )
    
    elif query.data.startswith("undel_"):
        global bank
        
        index = int(query.data.split("_")[1])
        if index >= len(bets) or bets[index]["status"] != "deleted":
            await query.edit_message_text("‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            return

        if bank < bets[index]["amount"]:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        bank -= bets[index]["amount"]
        bets[index]["status"] = "pending"
        save_data()

        await query.edit_message_text(
            f"‚úÖ –°—Ç–∞–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {bets[index]['match']}\nüí∏ {bets[index]['amount']}‚Ç¨ –≤—ã—á—Ç–µ–Ω–æ –∏–∑ –±–∞–Ω–∫–∞\n–¢–µ–∫—É—â–∏–π –±–∞–Ω–∫: {bank:.2f}‚Ç¨"
        )

    elif query.data in ["result_win", "result_lose"]:
        index = context.user_data.get("selected_bet")
        if index is None or index >= len(bets):
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        bet = bets[index]
        if bet["status"] != "pending":
            await query.edit_message_text("–≠—Ç–∞ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        if query.data == "result_win":
            profit = bet["amount"] * bet["coeff"]
            bank += profit
            bet["status"] = "win"
            await query.edit_message_text(f"‚úÖ –ü–æ–±–µ–¥–∞: {bet['match']}\n+{profit:.2f}‚Ç¨\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")
            save_data()
        else:
            bet["status"] = "lose"
            await query.edit_message_text(f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ: {bet['match']}\n-{bet['amount']:.2f}‚Ç¨\nüí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨")
            save_data()
            
async def remind_result(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    chat_id = job_data["chat_id"]
    match = job_data["match"]
    await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å –≤–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞–≤–∫–∏: {match}\n–ù–∞–ø–∏—à–∏ /result")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    completed_bets = [b for b in bets if b["status"] != "pending"]
    wins = [b for b in completed_bets if b["status"] == "win"]
    losses = [b for b in completed_bets if b["status"] == "lose"]

    total = len(completed_bets)
    total_wagered = sum(b["amount"] for b in completed_bets)
    total_profit = sum((b["amount"] * b["coeff"] - b["amount"]) if b["status"] == "win" else -b["amount"]
                       for b in completed_bets)
    avg_coeff = sum(b["coeff"] for b in completed_bets) / total if total else 0
    winrate = (len(wins) / total * 100) if total else 0

    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üí∞ –ë–∞–Ω–∫: {bank:.2f}‚Ç¨\n"
        f"üéØ –°—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total}\n"
        f"‚úÖ –ü–æ–±–µ–¥: {len(wins)} | ‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {len(losses)}\n"
        f"üìà Winrate: {winrate:.1f}%\n"
        f"üìâ –°—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ: {avg_coeff:.2f}\n"
        f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {total_wagered:.2f}‚Ç¨\n"
        f"üì• –ü—Ä–∏–±—ã–ª—å (ROI): {total_profit:.2f}‚Ç¨"
    )


async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("bets_export.csv", mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["–î–∞—Ç–∞", "–ú–∞—Ç—á", "–°—É–º–º–∞", "–ö—ç—Ñ", "–°—Ç–∞—Ç—É—Å"])
        for b in bets:
            writer.writerow([
                b['time'].strftime("%Y-%m-%d %H:%M"),
                b['match'], b['amount'], b['coeff'], b['status']
            ])
    await update.message.reply_document(document=open("bets_export.csv", "rb"), filename="bets_export.csv")

if __name__ == '__main__':
    load_data()
    app = ApplicationBuilder().token(TOKEN).build()
    job_queue = app.job_queue

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("bet", bet))
    app.add_handler(CommandHandler("result", result))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("export", export))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(
    filters.TEXT & ~filters.COMMAND,
    bet_step_handler
))
    app.add_handler(CommandHandler("bank", bank_command))
    app.add_handler(CommandHandler("graph", graph))
    app.add_handler(CommandHandler("delete", delete))
    app.add_handler(CommandHandler("undelete", undelete))
    app.add_handler(CommandHandler("pending", pending))
    app.add_handler(CommandHandler("cancel", cancel))




    app.run_polling()
